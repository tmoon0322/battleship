(()=>{"use strict";var __webpack_modules__={208:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(929), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(546), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n\nbody, h1, h2, .status-message, button, input {\n  font-family: \'Roboto\', sans-serif; /* Apply Roboto to general text and UI elements */\n}\nbody {\n  font-family: \'Roboto\', sans-serif;\n  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nheader h1 {\n  text-transform: uppercase;\n  font-size: 4rem; /* Adjust as needed */\n  font-weight: 800;\n  margin-bottom: 20px;\n color: #fff  ;\n}\n\n\n#start-screen {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  /* Existing styles */\n  height: 100vh;\n  width: 100%;\n  text-align: center;\n  /* Add a background image */\n  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});\n  background-size: cover;\n  background-position: center;\n  padding: 50px;\n}\n\n/* Style for the input field */\n#start-screen input[type="text"] {\n  font-size: 1.2em;\n  padding: 10px;\n  margin: 10px 0;\n  width: 80%;\n  max-width: 300px;\n}\n\n/* Style for the start button */\n#start-game-btn {\n  font-size: 1.5em;\n  padding: 15px 30px;\n  cursor: pointer;\n  /* Additional styles */\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n\n/* Hover effect for the button */\n#start-game-btn:hover {\n  background-color: #0056b3;\n}\n\n#start-screen h1 {\n  font-size: 150px;\n  color: #fff;\n  stroke: #000;\n}\n\n/* Flexbox container for the entire game */\n.game-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nheader {\n  width: 100%;\n  text-align: center;\n}\n\n.status-message-container {\n  display: flex;\n  justify-content: center;\n  align-items: center; /* Vertically centers the content */\n  min-height: 50px; /* Adjust based on the expected height of the status message */\n  width: 100%; /* Adjusts to 80% of the parent width */\n  min-width: 300px; /* Ensures the container doesn\'t shrink below 300px */\n  max-width: 600px; /* Limits the container\'s maximum width to 600px */\n  margin: 0 auto; /* Centers the container */\n   border: 2px solid white; /* White border */\n  border-radius: 8px; /* Optional: rounded corners for a softer look */\n \n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.2); /* Optional: subtle glow effect */\n}\n\n\n\n/* Status message styling */\n.status-message {\n  transition: opacity 0.3s ease; /* Smooth transition if opacity changes */\n  margin: 0;\n  padding: 10px 20px; /* Ensures good spacing */\n  font-size: 1.2rem;\n  font-weight: 400; /* Moderate weight for readability */\n  text-align: center;\n  color: white; /* White text */\n\n}\n\n\n/* Center only the player grid initially */\n.grid-container {\n  display: flex;\n  justify-content: center;  /* Center the player grid */\n  width: 600px;  /* Set width for the player grid */\n  max-width: 100vw;\n  margin: 0 40px 50px;\n  /* gap: 100px; */\n  position: relative;\n\n  /* [Addition] Ensure transitions apply when classes are added or removed */\n  transition: width 0.5s ease, justify-content 0.5s ease;\n}\n\n.grid-section {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Show grid headers when game has started */\n.game-container.game-started .grid-section h2 {\n  display: block;\n}\n\n.grid-section h2 {\n  display: none;\n  opacity: 0;\n  margin-bottom: 10px;\n  font-size: 1.5rem;\n  color: #fff;\n  transition: opacity 0.5s ease;\n}\n\n.game-container.game-started .grid-section h2 {\n  display: block;\n  opacity: 1;\n}\n\n/* Styling for individual grids (player and computer) */\n.grid {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);  /* 10 columns with 50px width each */\n  grid-template-rows: repeat(10, 50px);     /* 10 rows with 50px height each */\n  gap: 2px;\n  background-color: rgba(255, 255, 255, 0.2); /* Very faint background */\n  border: 2px solid #333;\n}\n\n/* Hide the computer grid and make sure it doesn\'t affect layout */\n#computer-grid {\n  opacity: 0;\n  width: 0;\n  height: 0;\n  overflow: hidden;\n\n  /* [Modification] Adjust transitions for width and height */\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\n}\n\n/* When battle phase starts, show the computer grid */\n.grid-container.show-battle #computer-grid {\n  opacity: 1;\n  width: 520px;  /* Set the correct width for the grid */\n  height: auto;\n\n  /* [Modification] Ensure transitions match for smooth animation */\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\n}\n\n/* Slide effect for player grid */\n.grid-container.slide-left {\n  justify-content: space-between; /* Move the player grid to the left */\n  width: 1500px; /* Expand the container width for both grids */\n}\n\n/* [Addition] Transition settings for reverse animation */\n.grid-container.slide-left, .grid-container {\n  transition: width 0.5s ease, justify-content 0.5s ease;\n}\n\n/* Grid cells */\n.grid div {\n  background-color: rgba(255, 255, 255, 0.1); /* Semi-transparent grid cells */\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid rgba(0, 0, 0, 0.1); /* Light border for visibility */\n}\n\n.grid div.highlight {\n  background-color: rgba(0, 128, 0, 0.5); /* Green highlight for hover */\n}\n\n.grid div.placed-ship {\n  background-color: #1e90ff;  /* Blue color for placed ships */\n   border: 1px solid rgba(0, 0, 0, 0.3);; /* Add a subtle border for definition */\n}\n\n.grid div:not(.hit):not(.miss):hover {\n  background-color: rgba(0, 0, 0, 0.1); /* Light hover effect */\n  transition: background-color 0.3s ease;\n  border-color: #000;  /* Darkens the grid line on hover */\n}\n\n/* Player Grid */\n#player-grid,\n#computer-grid{\n  border:none\n}\n\n\n\n.axis-toggle {\n  margin: 10px 0;\n  text-align: center;\n}\n\n\n\n#toggle-axis-btn {\n  background-color: transparent; /* Transparent background */\n  color: white; /* White text */\n  border: solid 1px #fff; /* Remove border */\n  padding: 10px 15px; /* Add padding for better touch area */\n  font-size: 16px; /* Adjust font size as needed */\n  cursor: pointer;\n  border-radius: 5px; /* Optional: rounded corners */\n  transition: background-color 0.3s ease, color 0.3s ease;\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.3); /* Subtle glow */\n\n  display: block;\n  margin: 0 auto;\n  position: relative;\n  text-align: center;\n  transition: transform 0.3s ease; /* Include transform in transition */\n}\n\n#toggle-axis-btn:hover {\n  background-color: rgba(255, 255, 255, 0.2); /* More opaque background on hover */\n  color: #fff; /* Slightly lighter black text */\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.5); /* Enhanced glow on hover */\n  \n}\n\n\n\n#toggle-axis-btn::after {\n  content: " (R)"; /* Displays "(R)" after the button text */\n  font-size: 0.8em; /* Smaller font for the hint */\n  color: #ccc; /* Light gray for subtlety */\n}\n/* Hits and misses on grids */\n/* .cell.hit,\n.cell.placed-ship.hit {\n  background-color: rgba(255, 0, 0, 0.9); \n}\n\n.cell.miss {\n  background-color: rgba(0, 0, 255, 0.7); \n} */\n/* Hits and misses on grids */\n.grid div.hit,\n.grid div.placed-ship.hit {\n  background-color: rgba(255, 0, 0, 0.9); /* Slightly transparent red */\n}\n\n.grid div.miss {\n  background-color: rgba(0, 0, 255, 0.7); /* Slightly transparent blue */\n}\n\n\n\n/* .cell.clicked {\n  \n  cursor: default; \n} */\n\n/* .cell.clicked:hover {\n  background-color: initial;\n} */\n.restart-container {\n  position: relative;\n padding-top: 20px;\n  margin: 20px auto;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n}\n\n#restart-btn {\n  position: absolute;\n  top: 50%; /* Center vertically within the container */\n  left: 50%; /* Center horizontally */\n  transform: translate(-50%, -50%); /* Adjust to ensure perfect centering */\n  display: none; /* Hidden by default */\n  font-size: 1rem;\n  background-color: transparent; /* Transparent background */\n  border: solid 1px #fff; /* Remove border */\n  padding: 10px 15px; /* Add padding for better touch area */\n  font-size: 16px; /* Adjust font size as needed */\n  cursor: pointer;\n  color: white;\n  border-radius: 5px;\n\n}\n\n#restart-btn:hover {\n  background-color: #45a049;  /* Darker green on hover */\n}\n\n/* Responsive layout */\n@media (max-width: 768px) {\n  .grid-container {\n      flex-direction: column;\n      align-items: center;\n  }\n\n  .grid {\n      margin-bottom: 20px;\n  }\n}\n\n\n/* [Addition] Smooth transition when hiding the computer grid */\n.grid-container:not(.show-battle) #computer-grid {\n  opacity: 0;\n  width: 0;\n  height: 0;\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\n}`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;;AAGA;EACE,iCAAiC,EAAE,iDAAiD;AACtF;AACA;EACE,iCAAiC;EACjC,yDAAkD;EAClD,sBAAsB;EACtB,4BAA4B;EAC5B,2BAA2B;EAC3B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,yBAAyB;EACzB,eAAe,EAAE,qBAAqB;EACtC,gBAAgB;EAChB,mBAAmB;CACpB,aAAa;AACd;;;AAGA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,oBAAoB;EACpB,aAAa;EACb,WAAW;EACX,kBAAkB;EAClB,2BAA2B;EAC3B,yDAAmD;EACnD,sBAAsB;EACtB,2BAA2B;EAC3B,aAAa;AACf;;AAEA,8BAA8B;AAC9B;EACE,gBAAgB;EAChB,aAAa;EACb,cAAc;EACd,UAAU;EACV,gBAAgB;AAClB;;AAEA,+BAA+B;AAC/B;EACE,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;EACf,sBAAsB;EACtB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;AACpB;;AAEA,gCAAgC;AAChC;EACE,yBAAyB;AAC3B;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;AACd;;AAEA,0CAA0C;AAC1C;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB,EAAE,mCAAmC;EACxD,gBAAgB,EAAE,8DAA8D;EAChF,WAAW,EAAE,uCAAuC;EACpD,gBAAgB,EAAE,qDAAqD;EACvE,gBAAgB,EAAE,kDAAkD;EACpE,cAAc,EAAE,0BAA0B;GACzC,uBAAuB,EAAE,iBAAiB;EAC3C,kBAAkB,EAAE,gDAAgD;;EAEpE,4CAA4C,EAAE,iCAAiC;AACjF;;;;AAIA,2BAA2B;AAC3B;EACE,6BAA6B,EAAE,yCAAyC;EACxE,SAAS;EACT,kBAAkB,EAAE,yBAAyB;EAC7C,iBAAiB;EACjB,gBAAgB,EAAE,oCAAoC;EACtD,kBAAkB;EAClB,YAAY,EAAE,eAAe;;AAE/B;;;AAGA,0CAA0C;AAC1C;EACE,aAAa;EACb,uBAAuB,GAAG,2BAA2B;EACrD,YAAY,GAAG,kCAAkC;EACjD,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;EAChB,kBAAkB;;EAElB,0EAA0E;EAC1E,sDAAsD;AACxD;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA,4CAA4C;AAC5C;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,mBAAmB;EACnB,iBAAiB;EACjB,WAAW;EACX,6BAA6B;AAC/B;;AAEA;EACE,cAAc;EACd,UAAU;AACZ;;AAEA,uDAAuD;AACvD;EACE,aAAa;EACb,uCAAuC,GAAG,oCAAoC;EAC9E,oCAAoC,MAAM,kCAAkC;EAC5E,QAAQ;EACR,0CAA0C,EAAE,0BAA0B;EACtE,sBAAsB;AACxB;;AAEA,kEAAkE;AAClE;EACE,UAAU;EACV,QAAQ;EACR,SAAS;EACT,gBAAgB;;EAEhB,2DAA2D;EAC3D,gEAAgE;AAClE;;AAEA,qDAAqD;AACrD;EACE,UAAU;EACV,YAAY,GAAG,uCAAuC;EACtD,YAAY;;EAEZ,iEAAiE;EACjE,gEAAgE;AAClE;;AAEA,iCAAiC;AACjC;EACE,8BAA8B,EAAE,qCAAqC;EACrE,aAAa,EAAE,8CAA8C;AAC/D;;AAEA,yDAAyD;AACzD;EACE,sDAAsD;AACxD;;AAEA,eAAe;AACf;EACE,0CAA0C,EAAE,gCAAgC;EAC5E,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,oCAAoC,EAAE,gCAAgC;AACxE;;AAEA;EACE,sCAAsC,EAAE,8BAA8B;AACxE;;AAEA;EACE,yBAAyB,GAAG,gCAAgC;GAC3D,oCAAoC,GAAG,uCAAuC;AACjF;;AAEA;EACE,oCAAoC,EAAE,uBAAuB;EAC7D,sCAAsC;EACtC,kBAAkB,GAAG,mCAAmC;AAC1D;;AAEA,gBAAgB;AAChB;;EAEE;AACF;;;;AAIA;EACE,cAAc;EACd,kBAAkB;AACpB;;;;AAIA;EACE,6BAA6B,EAAE,2BAA2B;EAC1D,YAAY,EAAE,eAAe;EAC7B,sBAAsB,EAAE,kBAAkB;EAC1C,kBAAkB,EAAE,sCAAsC;EAC1D,eAAe,EAAE,+BAA+B;EAChD,eAAe;EACf,kBAAkB,EAAE,8BAA8B;EAClD,uDAAuD;EACvD,4CAA4C,EAAE,gBAAgB;;EAE9D,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,+BAA+B,EAAE,oCAAoC;AACvE;;AAEA;EACE,0CAA0C,EAAE,oCAAoC;EAChF,WAAW,EAAE,gCAAgC;EAC7C,6CAA6C,EAAE,2BAA2B;;AAE5E;;;;AAIA;EACE,eAAe,EAAE,yCAAyC;EAC1D,gBAAgB,EAAE,8BAA8B;EAChD,WAAW,EAAE,4BAA4B;AAC3C;AACA,6BAA6B;AAC7B;;;;;;;GAOG;AACH,6BAA6B;AAC7B;;EAEE,sCAAsC,EAAE,6BAA6B;AACvE;;AAEA;EACE,sCAAsC,EAAE,8BAA8B;AACxE;;;;AAIA;;;GAGG;;AAEH;;GAEG;AACH;EACE,kBAAkB;CACnB,iBAAiB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,QAAQ,EAAE,2CAA2C;EACrD,SAAS,EAAE,wBAAwB;EACnC,gCAAgC,EAAE,uCAAuC;EACzE,aAAa,EAAE,sBAAsB;EACrC,eAAe;EACf,6BAA6B,EAAE,2BAA2B;EAC1D,sBAAsB,EAAE,kBAAkB;EAC1C,kBAAkB,EAAE,sCAAsC;EAC1D,eAAe,EAAE,+BAA+B;EAChD,eAAe;EACf,YAAY;EACZ,kBAAkB;;AAEpB;;AAEA;EACE,yBAAyB,GAAG,0BAA0B;AACxD;;AAEA,sBAAsB;AACtB;EACE;MACI,sBAAsB;MACtB,mBAAmB;EACvB;;EAEA;MACI,mBAAmB;EACvB;AACF;;;AAGA,+DAA+D;AAC/D;EACE,UAAU;EACV,QAAQ;EACR,SAAS;EACT,gEAAgE;AAClE","sourcesContent":["* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\n\\nbody, h1, h2, .status-message, button, input {\\n  font-family: \'Roboto\', sans-serif; /* Apply Roboto to general text and UI elements */\\n}\\nbody {\\n  font-family: \'Roboto\', sans-serif;\\n  background-image: url(./assets/images/start_2.jpg);\\n  background-size: cover;\\n  background-repeat: no-repeat;\\n  background-position: center;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\nheader h1 {\\n  text-transform: uppercase;\\n  font-size: 4rem; /* Adjust as needed */\\n  font-weight: 800;\\n  margin-bottom: 20px;\\n color: #fff  ;\\n}\\n\\n\\n#start-screen {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  /* Existing styles */\\n  height: 100vh;\\n  width: 100%;\\n  text-align: center;\\n  /* Add a background image */\\n  background-image: url(\'./assets/images/battle.jpg\');\\n  background-size: cover;\\n  background-position: center;\\n  padding: 50px;\\n}\\n\\n/* Style for the input field */\\n#start-screen input[type=\\"text\\"] {\\n  font-size: 1.2em;\\n  padding: 10px;\\n  margin: 10px 0;\\n  width: 80%;\\n  max-width: 300px;\\n}\\n\\n/* Style for the start button */\\n#start-game-btn {\\n  font-size: 1.5em;\\n  padding: 15px 30px;\\n  cursor: pointer;\\n  /* Additional styles */\\n  background-color: #007bff;\\n  color: white;\\n  border: none;\\n  border-radius: 5px;\\n}\\n\\n/* Hover effect for the button */\\n#start-game-btn:hover {\\n  background-color: #0056b3;\\n}\\n\\n#start-screen h1 {\\n  font-size: 150px;\\n  color: #fff;\\n  stroke: #000;\\n}\\n\\n/* Flexbox container for the entire game */\\n.game-container {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n}\\n\\nheader {\\n  width: 100%;\\n  text-align: center;\\n}\\n\\n.status-message-container {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center; /* Vertically centers the content */\\n  min-height: 50px; /* Adjust based on the expected height of the status message */\\n  width: 100%; /* Adjusts to 80% of the parent width */\\n  min-width: 300px; /* Ensures the container doesn\'t shrink below 300px */\\n  max-width: 600px; /* Limits the container\'s maximum width to 600px */\\n  margin: 0 auto; /* Centers the container */\\n   border: 2px solid white; /* White border */\\n  border-radius: 8px; /* Optional: rounded corners for a softer look */\\n \\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.2); /* Optional: subtle glow effect */\\n}\\n\\n\\n\\n/* Status message styling */\\n.status-message {\\n  transition: opacity 0.3s ease; /* Smooth transition if opacity changes */\\n  margin: 0;\\n  padding: 10px 20px; /* Ensures good spacing */\\n  font-size: 1.2rem;\\n  font-weight: 400; /* Moderate weight for readability */\\n  text-align: center;\\n  color: white; /* White text */\\n\\n}\\n\\n\\n/* Center only the player grid initially */\\n.grid-container {\\n  display: flex;\\n  justify-content: center;  /* Center the player grid */\\n  width: 600px;  /* Set width for the player grid */\\n  max-width: 100vw;\\n  margin: 0 40px 50px;\\n  /* gap: 100px; */\\n  position: relative;\\n\\n  /* [Addition] Ensure transitions apply when classes are added or removed */\\n  transition: width 0.5s ease, justify-content 0.5s ease;\\n}\\n\\n.grid-section {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n}\\n\\n/* Show grid headers when game has started */\\n.game-container.game-started .grid-section h2 {\\n  display: block;\\n}\\n\\n.grid-section h2 {\\n  display: none;\\n  opacity: 0;\\n  margin-bottom: 10px;\\n  font-size: 1.5rem;\\n  color: #fff;\\n  transition: opacity 0.5s ease;\\n}\\n\\n.game-container.game-started .grid-section h2 {\\n  display: block;\\n  opacity: 1;\\n}\\n\\n/* Styling for individual grids (player and computer) */\\n.grid {\\n  display: grid;\\n  grid-template-columns: repeat(10, 50px);  /* 10 columns with 50px width each */\\n  grid-template-rows: repeat(10, 50px);     /* 10 rows with 50px height each */\\n  gap: 2px;\\n  background-color: rgba(255, 255, 255, 0.2); /* Very faint background */\\n  border: 2px solid #333;\\n}\\n\\n/* Hide the computer grid and make sure it doesn\'t affect layout */\\n#computer-grid {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n  overflow: hidden;\\n\\n  /* [Modification] Adjust transitions for width and height */\\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\\n}\\n\\n/* When battle phase starts, show the computer grid */\\n.grid-container.show-battle #computer-grid {\\n  opacity: 1;\\n  width: 520px;  /* Set the correct width for the grid */\\n  height: auto;\\n\\n  /* [Modification] Ensure transitions match for smooth animation */\\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\\n}\\n\\n/* Slide effect for player grid */\\n.grid-container.slide-left {\\n  justify-content: space-between; /* Move the player grid to the left */\\n  width: 1500px; /* Expand the container width for both grids */\\n}\\n\\n/* [Addition] Transition settings for reverse animation */\\n.grid-container.slide-left, .grid-container {\\n  transition: width 0.5s ease, justify-content 0.5s ease;\\n}\\n\\n/* Grid cells */\\n.grid div {\\n  background-color: rgba(255, 255, 255, 0.1); /* Semi-transparent grid cells */\\n  width: 50px;\\n  height: 50px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  cursor: pointer;\\n  border: 1px solid rgba(0, 0, 0, 0.1); /* Light border for visibility */\\n}\\n\\n.grid div.highlight {\\n  background-color: rgba(0, 128, 0, 0.5); /* Green highlight for hover */\\n}\\n\\n.grid div.placed-ship {\\n  background-color: #1e90ff;  /* Blue color for placed ships */\\n   border: 1px solid rgba(0, 0, 0, 0.3);; /* Add a subtle border for definition */\\n}\\n\\n.grid div:not(.hit):not(.miss):hover {\\n  background-color: rgba(0, 0, 0, 0.1); /* Light hover effect */\\n  transition: background-color 0.3s ease;\\n  border-color: #000;  /* Darkens the grid line on hover */\\n}\\n\\n/* Player Grid */\\n#player-grid,\\n#computer-grid{\\n  border:none\\n}\\n\\n\\n\\n.axis-toggle {\\n  margin: 10px 0;\\n  text-align: center;\\n}\\n\\n\\n\\n#toggle-axis-btn {\\n  background-color: transparent; /* Transparent background */\\n  color: white; /* White text */\\n  border: solid 1px #fff; /* Remove border */\\n  padding: 10px 15px; /* Add padding for better touch area */\\n  font-size: 16px; /* Adjust font size as needed */\\n  cursor: pointer;\\n  border-radius: 5px; /* Optional: rounded corners */\\n  transition: background-color 0.3s ease, color 0.3s ease;\\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.3); /* Subtle glow */\\n\\n  display: block;\\n  margin: 0 auto;\\n  position: relative;\\n  text-align: center;\\n  transition: transform 0.3s ease; /* Include transform in transition */\\n}\\n\\n#toggle-axis-btn:hover {\\n  background-color: rgba(255, 255, 255, 0.2); /* More opaque background on hover */\\n  color: #fff; /* Slightly lighter black text */\\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.5); /* Enhanced glow on hover */\\n  \\n}\\n\\n\\n\\n#toggle-axis-btn::after {\\n  content: \\" (R)\\"; /* Displays \\"(R)\\" after the button text */\\n  font-size: 0.8em; /* Smaller font for the hint */\\n  color: #ccc; /* Light gray for subtlety */\\n}\\n/* Hits and misses on grids */\\n/* .cell.hit,\\n.cell.placed-ship.hit {\\n  background-color: rgba(255, 0, 0, 0.9); \\n}\\n\\n.cell.miss {\\n  background-color: rgba(0, 0, 255, 0.7); \\n} */\\n/* Hits and misses on grids */\\n.grid div.hit,\\n.grid div.placed-ship.hit {\\n  background-color: rgba(255, 0, 0, 0.9); /* Slightly transparent red */\\n}\\n\\n.grid div.miss {\\n  background-color: rgba(0, 0, 255, 0.7); /* Slightly transparent blue */\\n}\\n\\n\\n\\n/* .cell.clicked {\\n  \\n  cursor: default; \\n} */\\n\\n/* .cell.clicked:hover {\\n  background-color: initial;\\n} */\\n.restart-container {\\n  position: relative;\\n padding-top: 20px;\\n  margin: 20px auto;\\n  text-align: center;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n#restart-btn {\\n  position: absolute;\\n  top: 50%; /* Center vertically within the container */\\n  left: 50%; /* Center horizontally */\\n  transform: translate(-50%, -50%); /* Adjust to ensure perfect centering */\\n  display: none; /* Hidden by default */\\n  font-size: 1rem;\\n  background-color: transparent; /* Transparent background */\\n  border: solid 1px #fff; /* Remove border */\\n  padding: 10px 15px; /* Add padding for better touch area */\\n  font-size: 16px; /* Adjust font size as needed */\\n  cursor: pointer;\\n  color: white;\\n  border-radius: 5px;\\n\\n}\\n\\n#restart-btn:hover {\\n  background-color: #45a049;  /* Darker green on hover */\\n}\\n\\n/* Responsive layout */\\n@media (max-width: 768px) {\\n  .grid-container {\\n      flex-direction: column;\\n      align-items: center;\\n  }\\n\\n  .grid {\\n      margin-bottom: 20px;\\n  }\\n}\\n\\n\\n/* [Addition] Smooth transition when hiding the computer grid */\\n.grid-container:not(.show-battle) #computer-grid {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n  transition: opacity 0.5s ease, width 0.5s ease, height 0.5s ease;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///208\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX3JlcG9fdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},417:module=>{eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX3JlcG9fdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzPzFkZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///417\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFja19yZXBvX3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX3JlcG9fdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2tfcmVwb190ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX3JlcG9fdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX3JlcG9fdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFja19yZXBvX3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFja19yZXBvX3RlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},840:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/style.css\nvar style = __webpack_require__(208);\n;// CONCATENATED MODULE: ./src/style.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, \"head\");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(style/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/modules/ship.js\nfunction Ship(name, length) {\n    console.log(`Creating ship: ${name}, Length: ${length}`);\n      let hits = 0;\n      let positions = [];\n    \n      function hit() {\n        hits += 1;\n        console.log(`Ship hit! Current hits: ${hits}`);\n      }\n    \n      function isSunk() {\n        console.log(`Checking if ship is sunk: Hits = ${hits}, Length = ${length}`);\n        return hits >= length;\n      }\n      function setPositions(newPositions) {\n        if (Array.isArray(newPositions)) {\n          positions = newPositions;\n        } else {\n          throw new Error('Positions must be an array of coordinates.');\n        }\n      }\n    \n      return {\n        name,\n        length,\n        hit,\n        isSunk,\n        positions,\n        setPositions,\n        get hits() {\n          return hits;\n        },\n      };\n    }\n    \n;// CONCATENATED MODULE: ./src/modules/gameboard.js\n\n\nfunction Gameboard() {\n  // Ensure the board is a 10x10 grid of null values\n  let board = Array(10).fill(null).map(() => Array(10).fill(null)); // Creates a 2D array of nulls\n  let missedShots = [];\n  let ships = [];\n  let attackedCells = new Set();  // A set to track all attacked coordinates\n  let shipCells = new Set();\n\n  function placeShipSafely(x, y, ship, isHorizontal) {\n    const length = ship.length;\n    // console.log(`Checking if ship ${ship.name} can be safely placed at (${x}, ${y}) with orientation ${isHorizontal ? 'horizontal' : 'vertical'}`);\n    for (let i = 0; i < length; i++) {\n        const targetX = isHorizontal ? x : x + i;\n        const targetY = isHorizontal ? y + i : y;\n\n        if (targetX < 0 || targetX >= 10 || targetY < 0 || targetY >= 10) {\n            // console.log(`Out of bounds at (${targetX}, ${targetY})`);\n            return false;\n        }\n\n        if (typeof targetX === 'undefined' || typeof targetY === 'undefined' || targetX < 0 || targetX >= 10 || targetY < 0 || targetY >= 10) {\n            // console.error(`Invalid target coordinates: (${targetX}, ${targetY})`);\n            return false; // Or handle the error appropriately\n        }\n        \n        if (board[targetX][targetY]) {\n            // console.log(`Cell at (${targetX}, ${targetY}) is already occupied. Cannot place ship.`);\n            return false;\n        }\n    }\n    for (let i = 0; i < length; i++) {\n        const targetX = isHorizontal ? x : x + i;\n        const targetY = isHorizontal ? y + i : y;\n        board[targetX][targetY] = ship;\n        ship.positions.push({ x: targetX, y: targetY });\n        shipCells.add(`${targetX},${targetY}`);  // Track ship positions in shipCells set\n        // console.log(`Marking cell (${targetX}, ${targetY}) for ship ${ship.name}. Current shipCells:`, shipCells);\n    }\n    // console.log(`Ship ${ship.name} placed successfully with positions:`, ship.positions);\n    return true;\n  }\n\n\n\n  function placeShip(ship, x, y, isHorizontal) {\n    if (!ship || typeof x !== 'number' || typeof y !== 'number' || typeof isHorizontal !== 'boolean') {\n        // console.error('Invalid parameters provided to placeShip:', { ship, x, y, isHorizontal });\n        return false;\n    }\n\n    // console.log(`Attempting to place ship ${ship.name} of length ${ship.length} at (${x}, ${y}) ${isHorizontal ? 'horizontally' : 'vertically'}`);\n\n    // Proceed only if the parameters are valid\n    if (!placeShipSafely(x, y, ship, isHorizontal)) {\n        // console.error(`Failed to place ship safely at (${x}, ${y}) ${isHorizontal ? 'horizontally' : 'vertically'}`);\n        return false;\n    }\n\n    ship.positions = [];  // Initialize positions\n\n    for (let i = 0; i < ship.length; i++) {\n        const targetX = isHorizontal ? x : x + i;\n        const targetY = isHorizontal ? y + i : y;\n\n        if (targetX >= 0 && targetX < 10 && targetY >= 0 && targetY < 10) {\n            board[targetX][targetY] = ship;\n            ship.positions.push({ x: targetX, y: targetY });\n            // console.log(`Marking cell (${targetX}, ${targetY}) as occupied for ship ${ship.name}`);\n        } else {\n            // console.error(`Error: Attempted to place ship out of bounds at (${targetX}, ${targetY})`);\n            return false;\n        }\n    }\n\n    ships.push(ship);\n    // console.log(`Ship ${ship.name} placed successfully at (${x}, ${y}) ${isHorizontal ? 'horizontally' : 'vertically'}`);\n    // console.log(\"Ship cells after placement:\", shipCells); // Log the cells\n    return true;\n}\n\n\n\n\nfunction placeShipsForComputer() {\n    const shipsToPlace = [\n        Ship('Destroyer', 2),\n        Ship('Submarine', 3),\n        Ship('Cruiser', 3),\n        Ship('Battleship', 4),\n        Ship('Carrier', 5)\n    ];\n\n    // console.log('Starting ship placement for computer. Ships to place:', shipsToPlace);\n\n    shipsToPlace.forEach((ship) => {\n        let placed = false;\n        let attempts = 0;\n\n        while (!placed && attempts < 50) {\n            const isHorizontal = Math.random() < 0.5;\n            const x = Math.floor(Math.random() * (isHorizontal ? 10 : (10 - ship.length)));\n            const y = Math.floor(Math.random() * (isHorizontal ? (10 - ship.length) : 10));\n\n            // console.log(`Trying to place ship ${ship.name} at (${x}, ${y}) with orientation ${isHorizontal ? 'horizontal' : 'vertical'}. Attempt number: ${attempts + 1}`);\n\n            placed = placeShip(ship, x, y, isHorizontal);\n\n            if (!placed) {\n                // console.warn(`Failed attempt to place ${ship.name} at (${x}, ${y}). Attempt: ${attempts + 1}`);\n            }\n            attempts++;\n        }\n\n        if (!placed) {\n            // console.error(`Failed to place ship (${ship.name}) after ${attempts} attempts.`);\n        } else {\n            // console.log(`Successfully placed ${ship.name} with positions:`, ship.positions);\n        }\n    });\n\n    // console.log('Finished placing ships for computer.');\n    // console.log('Final shipCells after placing all ships:', shipCells);\nships.forEach(ship => {\n    // console.log(`Ship ${ship.name}: Positions =`, ship.positions);\n});\n\n}\n\n\n\nfunction receiveAttack([x, y]) {\n\n    console.log(`Attacking cell: (${x}, ${y})`);\n    console.log(`Ship cells:`, shipCells); // \n    \n    // Ensure x and y are within valid bounds\n    if (typeof x !== 'number' || typeof y !== 'number' || x < 0 || x >= 10 || y < 0 || y >= 10) {\n        console.error(`Invalid attack coordinates: (${x}, ${y})`);\n        return { result: 'error', coordinates: [x, y] };\n    }\n    \n\n    const key = `${x},${y}`;\n    if (attackedCells.has(key)) {\n        console.log(`Cell (${x}, ${y}) was already attacked.`);\n        return { result: 'already_attacked', coordinates: [x, y] };\n    }\n\n    attackedCells.add(key);\n    const target = board[x][y];\n\n    if (target === null) {\n        missedShots.push([x, y]);\n        console.log(`Missed at (${x}, ${y})`);\n        return { result: 'miss', coordinates: [x, y] };\n    } else if (typeof target === 'object' && typeof target.hit === 'function') {\n        console.log(`Hitting ship: ${target.name} at (${x}, ${y})`);\n        target.hit();\n        console.log(`Ship ${target.name} hit! Current hits after attack: ${target.hits}`);\n\n        if (target.isSunk()) {\n            console.log(`Sunk a ship at (${x}, ${y})`);\n            return { result: 'sunk', coordinates: [x, y], ship: target };\n        }\n\n        console.log(`Hit at (${x}, ${y})`);\n        return { result: 'hit', coordinates: [x, y], ship: target }; // Include 'ship' here\n    }\n\n    console.error(`Error: Invalid target at (${x}, ${y})`);\n    return { result: 'error', coordinates: [x, y] };\n}\n\n\nfunction alreadyAttacked(x, y) {\n    return attackedCells.has(`${x},${y}`);\n}\n\n\n\n\n\n\n  \nfunction attackCell(x, y) {\n    const target = board[x][y];  // Access the targeted cell on the board\n\n    if (target === null) {\n        console.log('Miss');\n        missedShots.push([x, y]);  // Track missed shots\n        return { result: 'miss', coordinates: [x, y] };  // Return result for controller to handle\n    } else if (typeof target === 'object' && typeof target.hit === 'function') {\n        target.hit();  // Register the hit on the ship\n        console.log('Hit');\n\n        if (target.isSunk()) {\n            console.log('Ship has been sunk!');\n            return { result: 'sunk', coordinates: [x, y] };\n        }\n        return { result: 'hit', coordinates: [x, y] };\n    } else {\n        console.error('Invalid hit detection');\n        return { result: 'error', coordinates: [x, y] };\n    }\n}\n\nfunction allShipsSunk() {\n    // console.log('Checking if all ships are sunk...');\n    // console.log('Ships array in allShipsSunk:', ships);\n    \n    ships.forEach(ship => {\n        // console.log(`Ship ${ship.name}: Length = ${ship.length}, Hits = ${ship.hits}`);\n    });\n\n    if (ships.length === 0) {\n        // console.log('No ships placed! This should not happen in a normal game.');\n        return false;  // Safety check if no ships have been placed\n    }\n\n    const allSunk = ships.every(ship => ship.isSunk());\n    // console.log(`All ships sunk: ${allSunk}`);\n    return allSunk;\n}\n\nfunction reset() {\n    board = Array(10).fill(null).map(() => Array(10).fill(null));  // Reset the board to empty state\n    missedShots = [];  // Clear all missed shots\n    ships = [];  // Remove all placed ships\n    attackedCells.clear();  // Clear all recorded attacks\n    shipCells.clear();  // Clear shipCells set during reset\n}\n\n\n  return {\n      placeShip,\n    //   canPlaceShip,\n      placeShipSafely,\n      placeShipsForComputer: (boardInstance) => placeShipsForComputer(boardInstance),\n      receiveAttack,\n      attackCell,\n      allShipsSunk,\n      alreadyAttacked,\n      reset,\n      get missedShots() {\n          return missedShots;\n      },\n      get board() {\n          return board;\n      },\n      get attackedCells(){\n        return attackedCells;\n      },\n      get ships() {\n        return ships;\n      },\n      get shipCells() {\n        // console.log('Accessing shipCells:', shipCells instanceof Set ? 'Valid Set' : 'Not a Set', shipCells);\n        return shipCells;\n      }\n  };\n}\n;// CONCATENATED MODULE: ./src/modules/dom.js\nconst DOMController = {\n    createGrid,\n    renderShip,\n    updateCell,\n    clearGrid,\n    updateStatus,  // Make sure this function is included in the export\n    highlightCells,\n    clearHighlights\n};\n\n  // Create the grid visually on the DOM\n function createGrid(gridElement) {\n    gridElement.innerHTML = ''; \n\n    // Create 100 cells for a 10x10 grid\n    for (let i = 0; i < 100; i++) {\n        const cell = document.createElement('div');\n        cell.classList.add('cell');  // Add a CSS class for styling\n        gridElement.appendChild(cell);\n    }\n  }\n\n\n// Render the ship visually on the grid\nfunction renderShip(gridElement, ship, shipCells, startX, startY, isHorizontal, isPlayer) {\n    if (!(shipCells instanceof Set)) {\n        console.error('Error: shipCells is not a Set. Received:', shipCells);\n        return; // Exit if shipCells is invalid to prevent further issues\n    }\n\n    console.log('Ship Cells Contents:', Array.from(shipCells)); // Log the full contents of shipCells to ensure they are correct\n    if (isPlayer) {\n        for (let i = 0; i < ship.length; i++) {\n            const coordX = startX + (isHorizontal ? 0 : i);\n            const coordY = startY + (isHorizontal ? i : 0);\n            const index = isHorizontal ? (startX * 10 + (startY + i)) : ((startX + i) * 10 + startY);\n            const cell = gridElement.children[index];\n\n            console.log(`Checking if shipCells has (${coordX},${coordY})`);\n\n            if (cell && shipCells.has(`${coordX},${coordY}`)) {\n                cell.classList.add('placed-ship');  // Only add the class if it's a player's ship\n                cell.dataset.shipName = ship.name;\n                console.log(`Rendering cell index: ${index} for ship ${ship.name}`);\n            } else if (cell) {\n                console.warn(`Cell index ${index} is either already occupied or not part of a valid ship, skipping render.`);\n            } else {\n                console.error(`Cell index ${index} is out of bounds or does not exist.`);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\nfunction highlightCells(gridElement, x, y, length, isHorizontal) {\n    console.log(`Highlighting cells from (${x}, ${y}), length: ${length}, orientation: ${isHorizontal ? 'horizontal' : 'vertical'}`);\n    for (let i = 0; i < length; i++) {\n        const cellIndex = isHorizontal ? (x * 10 + y + i) : ((x + i) * 10 + y);\n        const cell = gridElement.children[cellIndex];\n        if (cell && !cell.classList.contains('placed-ship')) {  // Check if the cell is not already part of another ship\n            cell.classList.add('highlight');\n            console.log(`Highlighted cell index: ${cellIndex}`);\n        } else if (cell) {\n            console.warn(`Skipped highlighting cell index ${cellIndex} as it's already occupied by a ship.`);\n        }\n    }\n}\n\n\n\nfunction clearHighlights(gridElement) {\n    Array.from(gridElement.children).forEach(cell => {\n        cell.classList.remove('highlight');\n    });\n}\n\nfunction updateStatus(message, delay = 0) {\n    const statusMessageElement = document.querySelector('.status-message');\n    if (!statusMessageElement) {\n        console.error('Status message element not found.');\n        return;\n    }\n\n    // If the delay is 0, update immediately\n    if (delay === 0) {\n        statusMessageElement.textContent = message;\n        statusMessageElement.style.display = 'block'; // Ensure it's visible\n    } else {\n        // Use a timeout for delayed updates\n        setTimeout(() => {\n            statusMessageElement.textContent = message;\n            statusMessageElement.style.display = 'block';\n        }, delay);\n    }\n}\n\n// function updateStatus(message) {\n//     // Always select the element fresh to ensure it's not stale\n//     const statusMessageElement = document.querySelector('.status-message');\n//     if (!statusMessageElement) {\n//         console.error('Status message element not found.');\n//         return;\n//     }\n\n//     console.log('Status Update:', message);\n//     statusMessageElement.style.display = 'none';  // Force the element to repaint\n//     setTimeout(() => {\n//         statusMessageElement.textContent = message;\n//         statusMessageElement.style.display = 'block';  // Show the element again\n//     }, 1000);  // 1-second delay for smoother flow\n// }\n// Update the cell after an attack (hit or miss)\nfunction updateCell(cell, result) {\n    if (result === 'hit') {\n        cell.classList.add('hit');  // Add class for hit styling\n    } else if (result === 'miss') {\n        cell.classList.add('miss');  // Add class for miss styling\n    }\n}\n\n// Clear the grid by removing all relevant classes\nfunction clearGrid(gridElement) {\n    if (!gridElement) {\n        console.error('Grid element is undefined in clearGrid function.');\n        return;\n    }\n\n    // Proceed if the gridElement is defined\n    Array.from(gridElement.children).forEach(cell => {\n        cell.classList.remove('hit', 'miss', 'placed-ship');\n    });\n}\n;// CONCATENATED MODULE: ./src/modules/player.js\n// In player.js\nfunction Player(isComputer = false) {\n    const previousMoves = new Set();\n    let activeTargets = [];\n\n    // Function to perform a random attack\n    function randomAttack() {\n        let x, y, coords;\n        do {\n            x = Math.floor(Math.random() * 10);\n            y = Math.floor(Math.random() * 10);\n            coords = [x, y];\n        } while (previousMoves.has(coords.toString()));\n        console.log(\"Generated random attack coordinates:\", coords);\n        return coords;\n    }\n\n    // Function to handle the first hit and populate potential targets\n    function handleFirstHit(hitCoords) {\n        const target = {\n            hits: [hitCoords],\n            unsunkHits: [hitCoords],\n            potentialTargets: getAdjacentCells(hitCoords[0], hitCoords[1]),\n            attackAxis: null,\n            direction: null,\n            reversed: false,\n            triedAxes: new Set()\n        };\n        console.log(\"Handling first hit. Created new target:\", JSON.stringify(target));\n        activeTargets.push(target);\n        return target;\n    }\n    \n    \n    // Helper function to get adjacent cells\n    function getAdjacentCells(x, y) {\n        const directions = [\n            [x - 1, y], [x + 1, y], [x, y - 1], [x, y + 1]\n        ];\n        return directions.filter(([newX, newY]) => {\n            return (\n                newX >= 0 && newX < 10 &&\n                newY >= 0 && newY < 10 &&\n                !previousMoves.has(`${newX},${newY}`)\n            );\n        });\n    }\n\n    // Function to get axis-aligned cells\n    function getAxisAlignedCells(target) {\n        const { hits, attackAxis, direction } = target;\n        const potentialTargets = [];\n    \n        // Use hits or unsunkHits based on context\n        let hitsToUse = target.unsunkHits && target.unsunkHits.length > 0 ? target.unsunkHits : target.hits;\n    \n        if (!hitsToUse || hitsToUse.length === 0) {\n            console.error('No hits to use for axis alignment');\n            return [];\n        }\n    \n        // Extract X and Y values from hits\n        const xValues = hitsToUse.map(hit => hit[0]);\n        const yValues = hitsToUse.map(hit => hit[1]);\n    \n        const minX = Math.min(...xValues);\n        const maxX = Math.max(...xValues);\n        const minY = Math.min(...yValues);\n        const maxY = Math.max(...yValues);\n    \n        console.log(`\\n--- Generating Axis-Aligned Cells ---`);\n        console.log(`Attack axis: ${attackAxis}, Current direction: ${direction}`);\n        console.log(`Hits:`, JSON.stringify(hitsToUse));\n        console.log(`minX: ${minX}, maxX: ${maxX}, minY: ${minY}, maxY: ${maxY}`);\n    \n        // Generate potential targets based on the axis and direction\n        if (attackAxis === 'horizontal') {\n            const nextY = direction === 'positive' ? maxY + 1 : minY - 1;\n            if (nextY >= 0 && nextY < 10 && !previousMoves.has(`${minX},${nextY}`)) {\n                potentialTargets.push([minX, nextY]);\n            }\n        } else if (attackAxis === 'vertical') {\n            const nextX = direction === 'positive' ? maxX + 1 : minX - 1;\n            if (nextX >= 0 && nextX < 10 && !previousMoves.has(`${nextX},${minY}`)) {\n                potentialTargets.push([nextX, minY]);\n            }\n        }\n    \n        console.log(\"New potential targets after axis alignment:\", JSON.stringify(potentialTargets));\n        return potentialTargets;\n    }\n    \n    \n    \n    \n    function computerAttack(gameboard, testAttackCoords = null) {\n        console.log(\"\\n=== Computer Attack Initiated ===\");\n        console.log(\"Active Targets at start:\", JSON.stringify(activeTargets));\n    \n        let attackCoords;\n        let target = activeTargets[0]; // Fetch the first active target, if any\n    \n        if (testAttackCoords) {\n            attackCoords = testAttackCoords;\n            console.log(`Using test attack coordinates: ${attackCoords}`);\n        } else if (!target) {\n            attackCoords = randomAttack();\n            console.log(\"No active target. Random attack selected:\", attackCoords);\n        } else {\n            console.log(\"Current target:\", JSON.stringify(target));\n    \n            while (true) {\n                if (target.potentialTargets.length === 0) {\n                    if (!target.reversed) {\n                        // Reverse direction\n                        target.direction = target.direction === 'positive' ? 'negative' : 'positive';\n                        target.reversed = true;\n                        console.log(`Reversing direction to ${target.direction}`);\n                        target.potentialTargets = getAxisAlignedCells(target);\n                    } else {\n                        // Both directions exhausted\n                        target.triedAxes.add(target.attackAxis);\n    \n                        if (target.unsunkHits.length > 0) {\n                            // Switch to perpendicular axis\n                            const perpendicularAxis = target.attackAxis === 'horizontal' ? 'vertical' : 'horizontal';\n                            if (!target.triedAxes.has(perpendicularAxis)) {\n                                target.attackAxis = perpendicularAxis;\n                                target.direction = 'positive';\n                                target.reversed = false;\n                                console.log(`Switching to perpendicular axis: ${target.attackAxis}`);\n                                target.potentialTargets = [];\n    \n                                target.unsunkHits.forEach(hit => {\n                                    const newTargets = getAxisAlignedCells({\n                                        hits: [hit],\n                                        attackAxis: target.attackAxis,\n                                        direction: target.direction\n                                    });\n                                    target.potentialTargets.push(...newTargets);\n                                });\n                            } else {\n                                // Both axes tried\n                                console.log(\"Both axes exhausted. Removing target.\");\n                                activeTargets = activeTargets.filter(t => t !== target);\n                                target = null;\n                                attackCoords = randomAttack();\n                                console.log(\"Random attack selected after exhausting targets:\", attackCoords);\n                                break;\n                            }\n                        } else {\n                            // No unsunk hits left\n                            console.log(\"No unsunk hits left. Removing target.\");\n                            activeTargets = activeTargets.filter(t => t !== target);\n                            target = null;\n                            attackCoords = randomAttack();\n                            console.log(\"Random attack selected after exhausting targets:\", attackCoords);\n                            break;\n                        }\n                    }\n                }\n    \n                if (target && target.potentialTargets.length > 0) {\n                    attackCoords = target.potentialTargets.shift();\n                    console.log(\"Targeting potential adjacent cell:\", attackCoords);\n                    if (!previousMoves.has(`${attackCoords[0]},${attackCoords[1]}`)) {\n                        break;\n                    }\n                } else if (!target) {\n                    break;\n                }\n            }\n    \n            if (!attackCoords) {\n                attackCoords = randomAttack();\n                console.log(\"No valid adjacent cell. Random attack selected:\", attackCoords);\n            }\n        }\n    \n        console.log(\"Final attack coordinates:\", attackCoords);\n    \n        // Perform the attack and handle the result\n        const attackResult = gameboard.receiveAttack(attackCoords);\n        previousMoves.add(`${attackCoords[0]},${attackCoords[1]}`);\n    \n        // Handle attack results\n        if (attackResult.result === 'hit' || attackResult.result === 'sunk') {\n            if (!target) {\n                // If no target was set, create a new one\n                target = handleFirstHit(attackCoords);\n                console.log(\"New target created after first hit:\", JSON.stringify(target));\n            } else {\n                // Append the hit coordinates to the current target's hits\n                target.hits.push(attackCoords);\n                target.unsunkHits.push(attackCoords);\n                console.log(\"Updated target after additional hit:\", JSON.stringify(target));\n            }\n    \n            // Determine attack axis if not set\n            if (target.attackAxis === null) {\n                target.attackAxis = determineAttackAxis(target.hits);\n                if (target.attackAxis) {\n                    console.log(`Attack axis determined: ${target.attackAxis}`);\n                    target.direction = 'positive';\n                    target.reversed = false;\n                    target.triedAxes.add(target.attackAxis);\n                    target.potentialTargets = getAxisAlignedCells(target);\n                } else {\n                    // No axis determined, use adjacent cells\n                    target.potentialTargets = getAdjacentCells(attackCoords[0], attackCoords[1]);\n                }\n            } else {\n                // Generate new potential targets along the axis\n                target.potentialTargets = getAxisAlignedCells(target);\n            }\n    \n            // Remove hit from unsunkHits if ship is sunk\n            if (attackResult.result === 'sunk') {\n                console.log(\"Ship sunk!\");\n    \n                // Remove all hits belonging to the sunk ship from unsunkHits\n                target.unsunkHits = target.unsunkHits.filter(coord =>\n                    !attackResult.ship.positions.some(pos => pos.x === coord[0] && pos.y === coord[1])\n                );\n    \n                // Remove hits from target.hits as well\n                target.hits = target.hits.filter(coord =>\n                    !attackResult.ship.positions.some(pos => pos.x === coord[0] && pos.y === coord[1])\n                );\n    \n                if (target.unsunkHits.length === 0) {\n                    // All ships in this cluster are sunk\n                    activeTargets = activeTargets.filter(t => t !== target);\n                    console.log(\"All ships in cluster sunk. Removing target.\");\n                    target = null;\n                } else {\n                    console.log(\"Ships remain in cluster. Continuing attack.\");\n                    // Generate new potential targets along the same axis\n                    target.potentialTargets = getAxisAlignedCells(target);\n                }\n            }\n        }\n    \n        console.log(\"Active Targets at end:\", JSON.stringify(activeTargets));\n        return { coords: attackCoords, result: attackResult.result, ship: attackResult.ship || null, };\n    }\n    \n    \n    \n function determineAttackAxis(hits) {\n    console.log(\"Determining attack axis based on hits:\", JSON.stringify(hits));\n    if (hits.length < 2) return null;\n\n    const [firstHit, secondHit] = hits;\n\n    if (firstHit[0] === secondHit[0]) {\n        console.log(\"Hits are on the same row. Attack axis: horizontal\");\n        return 'horizontal';\n    } else if (firstHit[1] === secondHit[1]) {\n        console.log(\"Hits are on the same column. Attack axis: vertical\");\n        return 'vertical';\n    }\n    return null;\n}\n\nfunction reset() {\n    previousMoves.clear();\n    activeTargets = [];\n}\n\n    return {\n        attack: (gameboard, coords) => gameboard.receiveAttack(coords),\n        randomAttack,\n        computerAttack,\n        determineAttackAxis,\n        handleFirstHit,  // Expose handleFirstHit here\n        getAdjacentCells,\n        reset,  // Expose getAdjacentCells for any isolated testing\n    };\n}\n\n\n\n;// CONCATENATED MODULE: ./src/modules/gamecontroller.js\n\n\n  // Import Player model\n\n\n\nlet playerGridElement, computerGridElement, statusMessageElement,toggleAxisButton;\nlet playerAttackHandler = null;\nlet playerName = 'Player';\n\n// Declare event handler variables\nlet mouseoverHandler;\nlet clickHandler;\nlet rotateShipHandler;\n\nlet computerAttackTimeout = null;\n\n\n// Initialize the gameboards for player and computer\nconst playerBoard = Gameboard();\nconst computerBoard = Gameboard();\nconsole.log('Initialized computerBoard shipCells:', computerBoard.shipCells instanceof Set ? 'Valid Set' : 'Not a Set', computerBoard.shipCells);\n\n// Initialize players\nconst player = Player();\nconst computer = Player(true);  // Computer player\n\n// Wait for DOM content to load\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Initialize the view elements (grids and status message)\n    playerGridElement = document.getElementById('player-grid');\n    computerGridElement = document.getElementById('computer-grid');\n    statusMessageElement = document.querySelector('.status-message');\n    toggleAxisButton = document.getElementById('toggle-axis-btn');\n    toggleAxisButton.addEventListener('click', rotateShip);\n\n    // Initialize grids\n    DOMController.createGrid(playerGridElement, playerBoard.board);\n    DOMController.createGrid(computerGridElement, computerBoard.board);\n\n    // Set up event listeners\n    handleShipPlacement(playerGridElement, playerBoard);\n   \n\n    // Start game setup\n    const startGameBtn = document.getElementById('start-game-btn');\n    startGameBtn.addEventListener('click', () => {\n        document.getElementById('start-screen').style.display = 'none';\n        document.getElementById('game-container').style.display = 'block';\n        startGame();  // Proceed to ship placement phase\n    });\n});\n\n// Getter functions for accessing DOM elements\nfunction getPlayerGridElement() {\n    return playerGridElement;\n}\n\nfunction getComputerGridElement() {\n    return computerGridElement;\n}\n\n\n\n\n\n\n\nlet currentShipIndex = 0;  // Track the current ship being placed\nlet allShipsPlaced = false;  // Flag to check if all ships are placed\n// Define ships for the game (fixed array with ship names and lengths)\nconst ships = [\n    { name: 'Destroyer', length: 2 },\n    { name: 'Submarine', length: 3 },\n    { name: 'Cruiser', length: 3 },\n    { name: 'Battleship', length: 4 },\n    { name: 'Carrier', length: 5 }\n];\nconsole.log('Initializing ships:', ships);\n\nlet isHorizontal = true;  // Default ship placement orientation\n\n// Handle ship placement logic\nfunction handleShipPlacement(gridElement, playerBoard) {\n  \n\n    // Define the mouseover handler\n    mouseoverHandler = function (e) {\n        if (allShipsPlaced) return;\n        const cell = e.target;\n        const cellIndex = Array.from(gridElement.children).indexOf(cell);\n        if (cellIndex === -1) return;\n        DOMController\n.clearHighlights(gridElement);\n        const x = Math.floor(cellIndex / 10);\n        const y = cellIndex % 10;\n        if (x < 0 || x >= 10 || y < 0 || y >= 10) {\n            return;\n        }\n        const currentShip = Ship(ships[currentShipIndex].name, ships[currentShipIndex].length);\n        if (playerBoard.placeShipSafely(x, y, currentShip.length, isHorizontal)) {\n            DOMController\n    .highlightCells(gridElement, x, y, currentShip.length, isHorizontal);\n        }\n    };\n\n    // Define the click handler\n    clickHandler = function (e) {\n        if (allShipsPlaced) return;\n        DOMController\n.clearHighlights(gridElement);\n        const cell = e.target;\n        const cellIndex = Array.from(gridElement.children).indexOf(cell);\n        const x = Math.floor(cellIndex / 10);\n        const y = cellIndex % 10;\n        const currentShip = Ship(ships[currentShipIndex].name, ships[currentShipIndex].length);\n        console.log(`Attempting to place ship: ${currentShip.name} (Length: ${currentShip.length}) at (${x}, ${y}) with orientation ${isHorizontal ? 'horizontal' : 'vertical'}`);\n        const placed = playerBoard.placeShipSafely(x, y, currentShip, isHorizontal);\n        if (placed) {\n            console.log('Ship placed successfully:', currentShip);\n            console.log('Ship positions before render:', currentShip.positions);\n            const playerShipCells = playerBoard.shipCells; // Get the player ship cells\n            DOMController\n    .renderShip(gridElement, currentShip, playerShipCells, x, y, isHorizontal, true);\n            playerBoard.ships.push(currentShip);\n            currentShipIndex++;\n            if (currentShipIndex >= ships.length) {\n                allShipsPlaced = true;\n                statusMessageElement.textContent = 'All ships placed. Battle begins!';\n                startBattlePhase();\n            } else {\n                statusMessageElement.textContent = `Place your ${ships[currentShipIndex].name} (${ships[currentShipIndex].length} spaces)`;\n            }\n            // Remove and re-add mouseover handler\n            gridElement.removeEventListener('mouseover', mouseoverHandler);\n            gridElement.addEventListener('mousemove', () => {\n                gridElement.addEventListener('mouseover', mouseoverHandler);\n            }, { once: true });\n        } else {\n            console.log('Failed to place ship due to overlap or invalid position');\n        }\n    };\n\n    // Define the rotate ship handler\n    rotateShipHandler = function (e) {\n        if (e.key === 'r') {\n            rotateShip();\n        }\n    };\n\n    // Add event listeners\n    gridElement.addEventListener('click', clickHandler);\n    gridElement.addEventListener('mouseover', mouseoverHandler);\n    document.addEventListener('keydown', rotateShipHandler);\n}\n\n\n// Rotate the current ship's orientation\nfunction rotateShip() {\n    console.log(`Rotating ship. New orientation is ${isHorizontal ? 'Horizontal' : 'Vertical'}`);\n    isHorizontal = !isHorizontal;\n    statusMessageElement.innerHTML = `Placing ${ships[currentShipIndex].name} (${ships[currentShipIndex].length} spaces). Currently ${isHorizontal ? 'Horizontal' : 'Vertical'}`;\n    DOMController.clearHighlights(playerGridElement); \n}\n\n\n\n\n\nconst toggleButton = document.getElementById('toggle-axis-btn');\n\n// Start the battle phase after all ships are placed\nfunction startBattlePhase() {\n    // Hide the toggle axis button, slide the player grid to the left, and show the computer grid\n    toggleButton.style.display = 'none';\n    const gridContainer = document.querySelector('.grid-container');\n    gridContainer.classList.add('slide-left', 'show-battle');\n    computerGridElement.style.visibility = 'visible';\n    const gameContainer = document.getElementById('game-container');\n    gameContainer.classList.add('game-started');\n\n\n    // Update the status message\n    DOMController.updateStatus('Computer is placing ships...');\n    DOMController.clearHighlights(computerGridElement);\n\n    // Place computer ships logically on the board\n    computerBoard.placeShipsForComputer();  // Use the method from the Gameboard object\n\n    console.log('Rendering computer ships, shipCells:', computerBoard.shipCells instanceof Set ? 'Valid Set' : 'Not a Set', computerBoard.shipCells);\n    // Render the ships on the computer grid for testing purposes (remove later in the final game)\n\n // Correct way to access shipCells using the getter from computerBoard instance\nconst computerShipCells = computerBoard.shipCells; \nconsole.log('Assigned computerShipCells from computerBoard:', computerShipCells instanceof Set ? 'Valid Set' : 'Not a Set', computerShipCells);\nconst playerShipCells = playerBoard.shipCells; \n// When rendering the ships, pass computerShipCells to renderShip function\ncomputerBoard.ships.forEach(ship => {\n    console.log('Rendering ship:', ship);\n    console.log('Ship positions:', ship.positions); // Log ship positions\n\n    ship.positions.forEach(({ x, y }) => {\n        console.log('Before calling renderShip:', computerShipCells instanceof Set ? 'Valid Set' : 'Not a Set', computerShipCells);\n        DOMController\n.renderShip(computerGridElement, ship, computerShipCells, x, y, ship.isHorizontal, false);\n    });\n});\n    // Update the status to notify the player it's their turn to attack\n    DOMController.updateStatus('Attack the enemy ships!', 2000);\n    addPlayerAttackListener();\n}\n\n\n\n// Handle player attacks\nfunction addPlayerAttackListener() {\n    // Remove existing event listener if it exists\n    if (playerAttackHandler) {\n        computerGridElement.removeEventListener('click', playerAttackHandler);\n    }\n\n    // Define the event handler function\n    playerAttackHandler = function (e) {\n        const cell = e.target;\n        if (cell.classList.contains('hit') || cell.classList.contains('miss')) return;\n\n        const cellIndex = Array.from(computerGridElement.children).indexOf(cell);\n        const x = Math.floor(cellIndex / 10);\n        const y = cellIndex % 10;\n\n        const attackResult = player.attack(computerBoard, [x, y]);  // Player attacks the computer\n\n        // **Update the cell's class immediately upon click**\n        if (attackResult.result === 'hit' || attackResult.result === 'sunk') {\n            cell.classList.add('hit');\n        } else if (attackResult.result === 'miss') {\n            cell.classList.add('miss');\n        }\n\n        handleAttackResult(attackResult, x, y, 'player');\n\n        if (computerBoard.allShipsSunk()) {\n            DOMController\n    .updateStatus('You win! All enemy ships are sunk!');\n            endGame('player');\n        } else {\n            setTimeout(() => {\n                DOMController\n        .updateStatus(\"Computer's turn...\");\n                handleComputerAttack();\n            }, 1500);\n        }\n    };\n\n    // Add the event listener\n    computerGridElement.addEventListener('click', playerAttackHandler);\n}\n\n\n// Handle computer attacks\nfunction handleComputerAttack() {\n    const attackResult = computer.computerAttack(playerBoard);\n    const { coords, result, ship } = attackResult;\n    const [x, y] = coords;\n    console.log('Computer attacking at:', x, y, 'Result:', result);\n    console.log('Computer attack result:', attackResult); \n\n   \n    // Process the result of the computer's attack\n    handleAttackResult(attackResult, x, y, 'computer')\n\n    // Check if the player has lost all ships\n    if (playerBoard.allShipsSunk()) {\n        DOMController\n.updateStatus('Computer wins! All your ships are sunk.');\n        endGame('computer');\n    } else {\n        // Add a delay before handing control back to the player\n        computerAttackTimeout = setTimeout(() => {\n            DOMController\n    .updateStatus(`${playerName}'s turn!`);\n        }, 2000); // Delay to ensure the computer's attack result is visible\n    }\n}\n\n\n\nfunction enablePlayerActions() {\n    computerGridElement.style.pointerEvents = 'auto';  // Re-enable clicking on the grid\n    playerGridElement.style.pointerEvents = 'auto';  // Re-enable clicking on the player's grid as well (if needed)\n}\n\n\n\n\n// End the game\nfunction endGame(winner) {\n    if (winner === 'player') {\n        DOMController\n.updateStatus(`Congratulations ${playerName}! You win! All enemy ships are sunk.`);\n    } else if (winner === 'computer') {\n        DOMController\n.updateStatus('Game Over. The computer has sunk all your ships!');\n    }\n\n    disablePlayerActions(); // Disable clicking on grids once the game ends\n\n        // Remove attack event listener\n        if (playerAttackHandler) {\n            computerGridElement.removeEventListener('click', playerAttackHandler);\n            playerAttackHandler = null;\n        }\n\n    // Show the restart button\n    const restartButton = document.getElementById('restart-btn');\n    restartButton.style.display = 'block';  // Make the button visible\n}\n\n// Ensure that the restart button only has a single event listener attached\nconst restartButton = document.getElementById('restart-btn');\nrestartButton.addEventListener('click', () => {\n    restartButton.style.display = 'none';  // Hide the button again\n    startGame();  // Simply restart the game by calling startGame\n});\n\nfunction disablePlayerActions() {\n    computerGridElement.style.pointerEvents = 'none';  // Disable clicking on the grid\n}\n\n// Event listener to start the game\nconst startScreen = document.getElementById('start-screen');\nconst gameContainer = document.getElementById('game-container');\nconst startGameBtn = document.getElementById('start-game-btn');\nconst playerNameInput = document.getElementById('player-name-input');\n\nstartGameBtn.addEventListener('click', () => {\n    // Get the player's name from the input field\n    const inputName = playerNameInput.value.trim();\n    if (inputName !== '') {\n        playerName = inputName;\n    } else {\n        playerName = 'Player'; // Default name\n    }\n\n    startScreen.style.display = 'none'; // Hide the start screen\n    gameContainer.style.display = 'block'; // Show the main game\n    startGame(); // Proceed to ship placement phase\n});\n\n// Handle the result of attacks \nfunction handleAttackResult(attackResult, x, y, attacker = 'computer') {\n    const { result, ship } = attackResult;\n\n    if (result === 'already_attacked') {\n        console.warn(\"Attempted attack on already attacked cell.\");\n        return;\n    }\n\n    // Determine which grid and which cell to target\n    const gridElement = (attacker === 'computer') ? playerGridElement : computerGridElement;\n    const cell = gridElement.children[x * 10 + y];\n\n    // Log the attack result\n    console.log(`${attacker.charAt(0).toUpperCase() + attacker.slice(1)} attack result: ${result} at (${x}, ${y})`);\n\n    setTimeout(() => {\n        if (attacker === 'computer') {\n            // **For computer's attack, update the cell's class**\n            if (result === 'hit' || result === 'sunk') {\n                cell.classList.add('hit');\n                DOMController\n        .updateStatus(`Computer ${result === 'sunk' ? `sank your ${ship.name}!` : 'hit your ship!'}`, 900);\n            } else if (result === 'miss') {\n                cell.classList.add('miss');\n                DOMController\n        .updateStatus('Computer missed!', 900);\n            }\n        } else {\n            // **For player's attack, we've already updated the cell's class**\n            if (result === 'sunk') {\n                const shipName = ship ? ship.name : 'a ship';\n                DOMController\n        .updateStatus(`${playerName} sank the enemy's ${shipName}!`);\n            } else if (result === 'hit') {\n                DOMController\n        .updateStatus(`${playerName} hit a ship!`, 900);\n            } else if (result === 'miss') {\n                DOMController\n        .updateStatus(`${playerName} missed!`, 900);\n            }\n        }\n    }, 200);\n}\n\n\n\nfunction removeShipPlacementEventListeners() {\n    if (clickHandler) {\n        playerGridElement.removeEventListener('click', clickHandler);\n        clickHandler = null;\n    }\n    if (mouseoverHandler) {\n        playerGridElement.removeEventListener('mouseover', mouseoverHandler);\n        mouseoverHandler = null;\n    }\n    if (rotateShipHandler) {\n        document.removeEventListener('keydown', rotateShipHandler);\n        rotateShipHandler = null;\n    }\n}\n\n\n// Restart game functionality\nfunction startGame() {\n        // Clear existing timeouts\n        if (computerAttackTimeout) {\n            clearTimeout(computerAttackTimeout);\n            computerAttackTimeout = null;\n        }\n    // Remove existing event listeners before starting the game\n    removeShipPlacementEventListeners();\n    if (playerAttackHandler) {\n        computerGridElement.removeEventListener('click', playerAttackHandler);\n        playerAttackHandler = null;\n    }\n\n    // Re-initialize grid elements\n    playerGridElement = getPlayerGridElement();\n    computerGridElement = getComputerGridElement();\n\n    if (!playerGridElement || !computerGridElement) {\n        console.error('Grid elements are not initialized properly. Aborting startGame.');\n        return;\n    }\n\n    // Reset game boards\n    playerBoard.reset();\n    computerBoard.reset();\n\n    // Reset player\n    computer.reset();\n    // Clear grids\n    DOMController.clearGrid(playerGridElement);\n    DOMController.clearGrid(computerGridElement);\n\n    // Reset UI\n    const gridContainer = document.querySelector('.grid-container');\n    gridContainer.classList.remove('slide-left', 'show-battle');\n    const gameContainer = document.getElementById('game-container');\n    gameContainer.classList.remove('game-started');\n    computerGridElement.style.visibility = 'hidden';\n    playerGridElement.style.visibility = 'visible';\n    toggleAxisButton.style.display = 'block';\n    restartButton.style.display = 'none';\n\n    // Reset game state variables\n    currentShipIndex = 0;\n    allShipsPlaced = false;\n    isHorizontal = true; // Reset orientation\n\n    // Update status message\n   // Display the initial status messages in sequence\n   DOMController.updateStatus(`Hi ${playerName}! Shall we play a game?`, 0); // Immediate display\n   setTimeout(() => {\n       DOMController\n.updateStatus(`Place your ships to begin the game.`);\n   }, 2000); // 2-second delay\n\n   // Show the first ship placement message after the initial message\n   setTimeout(() => {\n       if (currentShipIndex < ships.length) {\n           DOMController\n    .updateStatus(`${playerName}, place your ${ships[currentShipIndex].name} (${ships[currentShipIndex].length} spaces)`);\n       }\n   }, 4000); // 2 seconds after the \"Place your ships\" message\n\n // Re-enable player actions\n    enablePlayerActions();\n    // Set up event listeners for ship placement\n    handleShipPlacement(playerGridElement, playerBoard);\n}\n\n\n// Export startGame for the entry point\n/* harmony default export */ const gamecontroller = ({ startGame });\n;// CONCATENATED MODULE: ./src/index.js\n\n\ngamecontroller.startGame();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///840\n")},546:(g,n,t)=>{g.exports=t.p+"f0c64656c42efd52c24a.jpg"},929:(g,n,t)=>{g.exports=t.p+"3098a348f24badfb85fb.jpg"}},__webpack_module_cache__={};function __webpack_require__(g){var n=__webpack_module_cache__[g];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[g]={id:g,exports:{}};return __webpack_modules__[g](t,t.exports,__webpack_require__),t.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=g=>{var n=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(g,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(g,t)&&Object.defineProperty(g,t,{enumerable:!0,get:n[t]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}(),__webpack_require__.o=(g,n)=>Object.prototype.hasOwnProperty.call(g,n),(()=>{var g;__webpack_require__.g.importScripts&&(g=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!g&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(g=n.currentScript.src),!g)){var t=n.getElementsByTagName("script");if(t.length)for(var I=t.length-1;I>-1&&(!g||!/^http(s?):/.test(g));)g=t[I--].src}if(!g)throw new Error("Automatic publicPath is not supported in this browser");g=g.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=g})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(840)})();